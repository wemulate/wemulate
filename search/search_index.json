{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WEmulate","text":"<p>A simple and modern WAN emulator, developed to fullfill the needs of students and engineers.</p>"},{"location":"#usage","title":"Usage","text":"<p>Command syntax: <pre><code>$ wemulate\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nA modern WAN emulator\n\nOptions:\n-v, --version                   Show program's version number and exit\n--install-completion [bash|zsh|fish|powershell|pwsh]\n                                Install completion for the specified shell.\n--show-completion [bash|zsh|fish|powershell|pwsh]\n                                Show completion for the specified shell, to\n                                copy it or customize the installation.\n\n--help                          Show this message and exit.\n\nCommands:\nadd     add a new connection or parameter\nconfig  configure the application settings\ndelete  delete a connection or parameter\nreset   reset connection or the whole application settings\nset     set parameters on a connection\nshow    show specific information\n</code></pre></p>"},{"location":"dev/api/","title":"API Specification","text":"<p>This site contains information about the different API routes.  The API package has to be installed on the system to use the appropriate routes.</p>"},{"location":"dev/api/#get-apiv1device","title":"GET <code>/api/v1/device/</code>","text":"<p>Get general device information.</p>"},{"location":"dev/api/#response","title":"Response","text":"<pre><code>{\n\"mgmt_interfaces\" : [\n{\n\"ip\": \"192.168.1.1\",\n\"physical_name\": \"ens0\"\n},\n{\n\"ip\": \"10.10.10.10\",\n\"physical_name\": \"ens1\"\n}\n],\n\"logical_interfaces\": [\n{\n\"interface_id\": 1,\n\"logical_name\": \"LAN A\",\n\"physical_name\": \"eth1\",\n},\n{\n\"interface_id\": 2,\n\"logical_name\": \"LAN B\",\n\"physical_name\": \"eth2\",\n},\n{\n\"interface_id\": 3,\n\"logical_name\": \"LAN C\",\n\"physical_name\": \"eth3\",\n},\n{\n\"interface_id\": 4,\n\"logical_name\": \"LAN D\",\n\"physical_name\": \"eth4\",\n}\n],\n}\n</code></pre>"},{"location":"dev/api/#delete-apiv1devicereset","title":"DELETE <code>/api/v1/device/reset/</code>","text":"<p>Reset all connections on the device.</p>"},{"location":"dev/api/#response_1","title":"Response","text":"<pre><code>[\n\"Device successfully resetted\",\n200\n]\n</code></pre>"},{"location":"dev/api/#get-apiv1connections","title":"GET <code>/api/v1/connections/</code>","text":"<p>Get all connection information.</p>"},{"location":"dev/api/#response_2","title":"Response","text":"<pre><code>{\n\"connections\": [\n{\n\"connection_name\": \"Connection1\",\n\"connection_id\": 1,\n\"first_logical_interface_id\": 1,\n\"second_logical_interface_id\": 2,\n\"incoming\":{\n\"delay\": 0,\n\"packet_loss\": 5,\n\"bandwidth\": 100,\n\"jitter\": 5\n},\n\"outgoing\":{\n\"delay\": 10,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 5\n}\n},\n{\n\"connection_name\": \"Connection2\",\n\"connection_id\": 2,\n\"first_logical_interface_id\": 3,\n\"second_logical_interface_id\": 4,\n\"incoming\":{\n\"delay\": 10,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n},\n\"outgoing\":{\n\"delay\": 0,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n}\n}\n]    }\n</code></pre>"},{"location":"dev/api/#post-apiv1connections","title":"POST <code>/api/v1/connections/</code>","text":"<p>Create a single connection.</p>"},{"location":"dev/api/#request","title":"Request","text":"<pre><code>{\n\"connection_name\": \"new_name\",\n\"first_logical_interface_id\": 2,\n\"second_logical_interface_id\": 3,\n}\n</code></pre>"},{"location":"dev/api/#response_3","title":"Response","text":"<pre><code>{\n\"connection_name\": \"new_name\",\n\"connection_id\": 2,\n\"first_logical_interface_id\": 2,\n\"second_logical_interface_id\": 3,\n}\n</code></pre>"},{"location":"dev/api/#get-apiv1connectionsconnection_id","title":"GET <code>/api/v1/connections/&lt;connection_id&gt;/</code>","text":"<p>Get specific connection information.</p>"},{"location":"dev/api/#response_4","title":"Response","text":"<pre><code>{\n\"connection_name\": \"Connection2\",\n\"connection_id\": 2,\n\"first_logical_interface_id\": 2,\n\"second_logical_interface_id\": 3,\n\"incoming\":{\n\"delay\": 10,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n},\n\"outgoing\":{\n\"delay\": 0,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n}\n}\n</code></pre>"},{"location":"dev/api/#put-apiv1connectionsconnection_id","title":"PUT <code>/api/v1/connections/&lt;connection_id&gt;/</code>","text":"<p>Update specific connection information.</p>"},{"location":"dev/api/#request_1","title":"Request","text":"<pre><code>{\n\"connection_name\": \"new-name\",\n\"connection_id\": 2,\n\"first_logical_interface_id\": 2,\n\"second_logical_interface_id\": 3,\n\"incoming\":{\n\"delay\": 10,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n},\n\"outgoing\":{\n\"delay\": 0,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n}\n}\n</code></pre>"},{"location":"dev/api/#response_5","title":"Response","text":"<pre><code>{\n\"connection_name\": \"new-name\",\n\"connection_id\": 2,\n\"first_logical_interface_id\": 2,\n\"second_logical_interface_id\": 3,\n\"incoming\":{\n\"delay\": 10,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n},\n\"outgoing\":{\n\"delay\": 0,\n\"packet_loss\": 0,\n\"bandwidth\": 0,\n\"jitter\": 0\n}\n}\n</code></pre>"},{"location":"dev/api/#delete-apiv1connectionsconnection_id","title":"DELETE <code>/api/v1/connections/&lt;connection_id&gt;/</code>","text":"<p>Deletes a specific connection.</p>"},{"location":"dev/api/#response_6","title":"Response","text":"<pre><code>[\n\"Connection deleted successfully\",\n200\n]\n</code></pre>"},{"location":"dev/developer-interface/","title":"Developer Interface","text":"<p>This part of the documentation covers all the interfaces of WEmulate.</p>"},{"location":"dev/developer-interface/#database-and-tc-interface","title":"Database and TC Interface","text":""},{"location":"dev/developer-interface/#wemulate.ext.utils.add_connection","title":"<code>wemulate.ext.utils.add_connection(connection_name, first_logical_interface, second_logical_interface)</code>","text":"<p>Creates a new connection in the database and adds a linux bridge on the host system.</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection which should be created.</p> required <code>first_logical_interface</code> <code>str</code> <p>Name of the first logical interface.</p> required <code>second_logical_interface</code> <code>str</code> <p>Name of the second logical interface.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/add.py</code> <pre><code>def add_connection(\nconnection_name: str, first_logical_interface: str, second_logical_interface: str\n) -&gt; None:\n\"\"\"\n    Creates a new connection in the database and adds a linux bridge on the host system.\n    Args:\n        connection_name: Name of the connection which should be created.\n        first_logical_interface: Name of the first logical interface.\n        second_logical_interface: Name of the second logical interface.\n    Returns:\n        None\n    \"\"\"\n(\nphysical_interface1_name,\nphysical_interface2_name,\n) = retrieve.get_physical_interface_names(\nfirst_logical_interface, second_logical_interface\n)\ndbutils.create_connection(\nconnection_name,\ndbutils.get_logical_interface_by_name(first_logical_interface),\ndbutils.get_logical_interface_by_name(second_logical_interface),\ndbutils.get_active_profile(dbutils.get_device()),\n)\ntcutils.add_connection(\nconnection_name,\nphysical_interface1_name,\nphysical_interface2_name,\n)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.add_parameter","title":"<code>wemulate.ext.utils.add_parameter(connection_name, parameters, direction)</code>","text":"<p>Add parameters to the already configured parameters on the given connection. If a direction is provided, the parameter will be applied only on the given direction. If not, the parameter will be applied in both directions (bidirectional, in-/outgoing).</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection on which the parameters should be configured.</p> required <code>parameters</code> <code>Dict[str, float]</code> <p>Parameters which should be configured.</p> required <code>direction</code> <code>Optional[str]</code> <p>Direction on which the parameter should be applied (bidirectional if None)</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/add.py</code> <pre><code>def add_parameter(\nconnection_name: str, parameters: Dict[str, float], direction: Optional[str]\n) -&gt; None:\n\"\"\"\n    Add parameters to the already configured parameters on the given connection.\n    If a direction is provided, the parameter will be applied only on the given direction.\n    If not, the parameter will be applied in both directions (bidirectional, in-/outgoing).\n    Args:\n        connection_name: Name of the connection on which the parameters should be configured.\n        parameters: Parameters which should be configured.\n        direction: Direction on which the parameter should be applied (bidirectional if None)\n    Returns:\n        None\n    \"\"\"\nconnection, current_parameters = common.get_current_applied_parameters(\nconnection_name\n)\ncommon.set_parameters_with_tc(\nconnection,\ncommon.create_or_update_parameters_in_db(\nconnection, parameters, direction, current_parameters\n),\ndirection,\n)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.set_parameter","title":"<code>wemulate.ext.utils.set_parameter(connection_name, parameters, direction)</code>","text":"<p>Set parameters on the given connection. Replaces all parameters which are configured. If a direction is provided, the parameter will be applied only on the given direction. If not, the parameter will be applied in both directions (bidirectional, in-/outgoing).</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection on which the parameters should be configured.</p> required <code>parameters</code> <code>Dict[str, float]</code> <p>Parameters which should be configured.</p> required <code>direction</code> <code>Optional[str]</code> <p>Direction on which the parameter should be applied (bidirectional if None)</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/set.py</code> <pre><code>def set_parameter(\nconnection_name: str, parameters: Dict[str, float], direction: Optional[str]\n) -&gt; None:\n\"\"\"\n    Set parameters on the given connection. Replaces all parameters which are configured.\n    If a direction is provided, the parameter will be applied only on the given direction.\n    If not, the parameter will be applied in both directions (bidirectional, in-/outgoing).\n    Args:\n        connection_name: Name of the connection on which the parameters should be configured.\n        parameters: Parameters which should be configured.\n        direction: Direction on which the parameter should be applied (bidirectional if None)\n    Returns:\n        None\n    \"\"\"\nconnection: ConnectionModel = dbutils.get_connection_by_name(connection_name)\ndbutils.delete_all_parameter_on_connection(connection.connection_id, direction)\nconnection, current_parameters = common.get_current_applied_parameters(\nconnection_name\n)\ncommon.set_parameters_with_tc(\nconnection,\ncommon.create_or_update_parameters_in_db(\nconnection, parameters, direction, current_parameters\n),\ndirection,\n)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.create_or_update_parameters_in_db","title":"<code>wemulate.ext.utils.create_or_update_parameters_in_db(connection, parameters, direction, current_parameters=Dict[str, Dict[str, int]])</code>","text":"<p>Creates and updates parameters in the database.</p> <p>Args:     connection: Connection object on which the updates should be made.     parameters: Parameters which should be updated.     direction: Direction on which the parameter should be applied (bidirectional if None)     current_parameters: Current parameters which should be updated.</p> <p>Returns:     Returns the current_parameters which are set in the database.</p> Source code in <code>wemulate/ext/utils/common.py</code> <pre><code>def create_or_update_parameters_in_db(\nconnection: ConnectionModel,\nparameters: Dict[str, int],\ndirection: Optional[str],\ncurrent_parameters=Dict[str, Dict[str, int]],\n) -&gt; Dict[str, Dict[str, int]]:\n\"\"\"\n    Creates and updates parameters in the database.\n    Args:\n        connection: Connection object on which the updates should be made.\n        parameters: Parameters which should be updated.\n        direction: Direction on which the parameter should be applied (bidirectional if None)\n        current_parameters: Current parameters which should be updated.\n    Returns:\n        Returns the current_parameters which are set in the database.\n    \"\"\"\nfor direction in [INCOMING, OUTGOING] if direction is None else [direction]:\nfor parameter_name in PARAMETERS:\nif parameter_name in parameters:\n_set_specific_parameter(\nconnection,\nparameter_name,\nparameters,\ncurrent_parameters,\ndirection,\n)\nreturn current_parameters\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.set_parameters_with_tc","title":"<code>wemulate.ext.utils.set_parameters_with_tc(connection, parameters, direction)</code>","text":"<p>Set parameters on the host system on the given connection.</p> <p>Args:     connection: Connection object on which the updates should be made.     parameters: Parameters which should be configured.     direction: Direction on which the parameter should be applied (bidirectional if None)</p> <p>Returns:     None</p> Source code in <code>wemulate/ext/utils/common.py</code> <pre><code>def set_parameters_with_tc(\nconnection: ConnectionModel,\nparameters: Dict[str, Dict[str, int]],\ndirection: Optional[str],\n):\n\"\"\"\n    Set parameters on the host system on the given connection.\n    Args:\n        connection: Connection object on which the updates should be made.\n        parameters: Parameters which should be configured.\n        direction: Direction on which the parameter should be applied (bidirectional if None)\n    Returns:\n        None\n    \"\"\"\ntcutils.set_parameters(\nconnection.connection_name,\ndbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name,\nparameters,\ndirection,\n)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.delete_parameters_in_db","title":"<code>wemulate.ext.utils.delete_parameters_in_db(parameters, current_parameters, connection, direction)</code>","text":"<p>Delete specific parameters in db.</p> <p>Parameters:</p> Name Type Description Default <code>parameters</code> <code>Dict[str, int]</code> <p>Parameters which should be deleted.</p> required <code>current_parameters</code> <code>Dict[str, Dict[str, int]]</code> <p>The current parameters of the connection.</p> required <code>connection</code> <code>ConnectionModel</code> <p>Connection object on which the updates should be made.</p> required <code>direction</code> <code>Optional[str]</code> <p>Direction on which the parameter should be applied (bidirectional if None)</p> required <p>Returns:</p> Type Description <code>Dict[str, Dict[str, int]]</code> <p>Returns the current parameters in the database.</p> Source code in <code>wemulate/ext/utils/common.py</code> <pre><code>def delete_parameters_in_db(\nparameters: Dict[str, int],\ncurrent_parameters: Dict[str, Dict[str, int]],\nconnection: ConnectionModel,\ndirection: Optional[str],\n) -&gt; Dict[str, Dict[str, int]]:\n\"\"\"\n    Delete specific parameters in db.\n    Args:\n        parameters: Parameters which should be deleted.\n        current_parameters: The current parameters of the connection.\n        connection: Connection object on which the updates should be made.\n        direction: Direction on which the parameter should be applied (bidirectional if None)\n    Returns:\n        Returns the current parameters in the database.\n    \"\"\"\nfor direction in [INCOMING, OUTGOING] if direction is None else [direction]:\nfor parameter_name in PARAMETERS:\nif (\nparameter_name in parameters\nand parameter_name in current_parameters[direction]\n):\n_delete_specific_parameter(connection, parameter_name, direction)\ncurrent_parameters[direction].pop(parameter_name)\nreturn current_parameters\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_current_applied_parameters","title":"<code>wemulate.ext.utils.get_current_applied_parameters(connection_name)</code>","text":"<p>Retrieve the connection object and its current applied parameters.</p> <p>Args:     connection_name: The name of the connection</p> <p>Returns:     Returns the connection object (ConnectionModel) and the current_parameters which are currently set.</p> Source code in <code>wemulate/ext/utils/common.py</code> <pre><code>def get_current_applied_parameters(connection_name: str):\n\"\"\"\n    Retrieve the connection object and its current applied parameters.\n    Args:\n        connection_name: The name of the connection\n    Returns:\n        Returns the connection object (ConnectionModel) and the current_parameters which are currently set.\n    \"\"\"\nconnection: ConnectionModel = dbutils.get_connection_by_name(connection_name)\ncurrent_parameters: Dict[str, Dict[str, int]] = {OUTGOING: {}, INCOMING: {}}\nfor parameter in connection.parameters:\ncurrent_parameters[parameter.direction][\nparameter.parameter_name\n] = parameter.value\nreturn connection, current_parameters\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.delete_connection","title":"<code>wemulate.ext.utils.delete_connection(connection_name)</code>","text":"<p>Delete connection with the given name.</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection which should be deleted.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/delete.py</code> <pre><code>def delete_connection(connection_name: str) -&gt; None:\n\"\"\"\n    Delete connection with the given name.\n    Args:\n        connection_name: Name of the connection which should be deleted.\n    Returns:\n        None\n    \"\"\"\nconnection: ConnectionModel = dbutils.get_connection_by_name(connection_name)\nphysical_interface_name = dbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name\ntcutils.remove_parameters(connection_name, physical_interface_name)\ntcutils.remove_connection(connection_name)\ndbutils.delete_connection_by_name(connection_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.delete_parameter","title":"<code>wemulate.ext.utils.delete_parameter(connection_name, parameters, direction)</code>","text":"<p>Delete specific parameters on the given connection. If a direction is provided, the parameter will be removed only on the given direction. If not, the parameter will be removed in both directions (bidirectional, in-/outgoing).</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection on which the parameters should be deleted.</p> required <code>parameters</code> <code>Dict[str, int]</code> <p>Parameters which should be deleted.</p> required <code>direction</code> <code>Optional[str]</code> <p>The direction on which the parameter should be removed (bidirectional if None)</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/delete.py</code> <pre><code>def delete_parameter(\nconnection_name: str, parameters: Dict[str, int], direction: Optional[str]\n) -&gt; None:\n\"\"\"\n    Delete specific parameters on the given connection.\n    If a direction is provided, the parameter will be removed only on the given direction.\n    If not, the parameter will be removed in both directions (bidirectional, in-/outgoing).\n    Args:\n        connection_name: Name of the connection on which the parameters should be deleted.\n        parameters: Parameters which should be deleted.\n        direction: The direction on which the parameter should be removed (bidirectional if None)\n    Returns:\n        None\n    \"\"\"\nconnection, current_parameters = common.get_current_applied_parameters(\nconnection_name\n)\nphysical_interface_name = dbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name\ntcutils.remove_parameters(connection_name, physical_interface_name)\ncommon.set_parameters_with_tc(\nconnection,\ncommon.delete_parameters_in_db(\nparameters, current_parameters, connection, direction\n),\ndirection,\n)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.reset_connection","title":"<code>wemulate.ext.utils.reset_connection(connection_name)</code>","text":"<p>Deletes all parameter on a specific connection</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection which should be reset</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/reset.py</code> <pre><code>def reset_connection(connection_name: str) -&gt; None:\n\"\"\"\n    Deletes all parameter on a specific connection\n    Args:\n        connection_name: Name of the connection which should be reset\n    Returns:\n        None\n    \"\"\"\nconnection: ConnectionModel = dbutils.get_connection_by_name(connection_name)\ndbutils.delete_all_parameter_on_connection(connection.connection_id)\nphysical_interface_name = dbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name\ntcutils.remove_parameters(connection.connection_name, physical_interface_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.reset_device","title":"<code>wemulate.ext.utils.reset_device()</code>","text":"<p>Deletes all parameters and connection in the database and on the host system.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/reset.py</code> <pre><code>def reset_device() -&gt; None:\n\"\"\"\n    Deletes all parameters and connection in the database and on the host system.\n    Returns:\n        None\n    \"\"\"\nfor connection in dbutils.get_connection_list():\nphysical_interface_name = (\ndbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name\n)\ntcutils.remove_parameters(connection.connection_name, physical_interface_name)\ntcutils.remove_connection(connection.connection_name)\ndbutils.reset_all_connections()\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_physical_interface_names","title":"<code>wemulate.ext.utils.get_physical_interface_names(first_logical_interface, second_logical_interface)</code>","text":"<p>Get the physical interface names for the logical interface names.</p> <p>Parameters:</p> Name Type Description Default <code>first_logical_interface</code> <code>str</code> <p>First logical interface name.</p> required <code>second_logical_interface</code> <code>str</code> <p>Second logical interface name.</p> required <p>Returns:</p> Type Description <code>Tuple[str, str]</code> <p>Tuple of strings.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_physical_interface_names(\nfirst_logical_interface: str, second_logical_interface: str\n) -&gt; Tuple[str, str]:\n\"\"\"\n    Get the physical interface names for the logical interface names.\n    Args:\n        first_logical_interface: First logical interface name.\n        second_logical_interface: Second logical interface name.\n    Returns:\n        Tuple of strings.\n    \"\"\"\nphysical_interface1_name: str = dbutils.get_physical_interface_by_logical_name(\nfirst_logical_interface\n).physical_name\nphysical_interface2_name: str = dbutils.get_physical_interface_by_logical_name(\nsecond_logical_interface\n).physical_name\nreturn physical_interface1_name, physical_interface2_name\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_logical_interface_by_name","title":"<code>wemulate.ext.utils.get_logical_interface_by_name(logical_interface_name)</code>","text":"<p>Return the logical interface object for a given name</p> <p>Parameters:</p> Name Type Description Default <code>logical_interface_name</code> <code>str</code> <p>Logical interface name.</p> required <p>Returns:</p> Type Description <code>Optional[LogicalInterfaceModel]</code> <p>Returns a logical interface object.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_logical_interface_by_name(\nlogical_interface_name: str,\n) -&gt; Optional[LogicalInterfaceModel]:\n\"\"\"\n    Return the logical interface object for a given name\n    Args:\n        logical_interface_name: Logical interface name.\n    Returns:\n        Returns a logical interface object.\n    \"\"\"\nreturn dbutils.get_logical_interface_by_name(logical_interface_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.connection_exists_in_db","title":"<code>wemulate.ext.utils.connection_exists_in_db(connection_name)</code>","text":"<p>Returns a true if a connection exists in the database</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Connection name.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Returns a boolean.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def connection_exists_in_db(connection_name: str) -&gt; bool:\n\"\"\"\n    Returns a true if a connection exists in the database\n    Args:\n        connection_name: Connection name.\n    Returns:\n        Returns a boolean.\n    \"\"\"\nreturn dbutils.connection_exists(connection_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_connection_by_name","title":"<code>wemulate.ext.utils.get_connection_by_name(connection_name)</code>","text":"<p>Returns a a connection object for a connection name.</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Connection name.</p> required <p>Returns:</p> Type Description <code>ConnectionModel</code> <p>Returns a connection object.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_connection_by_name(connection_name: str) -&gt; ConnectionModel:\n\"\"\"\n    Returns a a connection object for a connection name.\n    Args:\n        connection_name: Connection name.\n    Returns:\n        Returns a connection object.\n    \"\"\"\nreturn dbutils.get_connection_by_name(connection_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_connection_by_id","title":"<code>wemulate.ext.utils.get_connection_by_id(connection_id)</code>","text":"<p>Returns a a connection object by its unique id.</p> <p>Parameters:</p> Name Type Description Default <code>connection_id</code> <code>int</code> <p>Connection id.</p> required <p>Returns:</p> Type Description <code>ConnectionModel</code> <p>Returns a connection object.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_connection_by_id(connection_id: int) -&gt; ConnectionModel:\n\"\"\"\n    Returns a a connection object by its unique id.\n    Args:\n        connection_id: Connection id.\n    Returns:\n        Returns a connection object.\n    \"\"\"\nreturn dbutils.get_connection_by_id(connection_id)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_logical_interface_by_physical_name","title":"<code>wemulate.ext.utils.get_logical_interface_by_physical_name(physical_interface_name)</code>","text":"<p>Returns the logical interface object for a physical interface name.</p> <p>Parameters:</p> Name Type Description Default <code>physical_interface_name</code> <code>str</code> <p>Name of the physical interface.</p> required <p>Returns:</p> Type Description <code>LogicalInterfaceModel</code> <p>Returns a logical interface object.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_logical_interface_by_physical_name(\nphysical_interface_name: str,\n) -&gt; LogicalInterfaceModel:\n\"\"\"\n    Returns the logical interface object for a physical interface name.\n    Args:\n        physical_interface_name: Name of the physical interface.\n    Returns:\n        Returns a logical interface object.\n    \"\"\"\nreturn dbutils.get_logical_interface_by_physical_name(physical_interface_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_logical_interface_by_id","title":"<code>wemulate.ext.utils.get_logical_interface_by_id(logical_interface_id)</code>","text":"<p>Returns the logical interface object for the logical interface id.</p> <p>Parameters:</p> Name Type Description Default <code>logical_interface_id</code> <code>int</code> <p>The unique identifier for the specific logical interface.</p> required <p>Returns:</p> Type Description <code>LogicalInterfaceModel</code> <p>Returns a logical interface object.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_logical_interface_by_id(\nlogical_interface_id: int,\n) -&gt; LogicalInterfaceModel:\n\"\"\"\n    Returns the logical interface object for the logical interface id.\n    Args:\n        logical_interface_id: The unique identifier for the specific logical interface.\n    Returns:\n        Returns a logical interface object.\n    \"\"\"\nreturn dbutils.get_logical_interface_by_id(logical_interface_id)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.get_connection_list","title":"<code>wemulate.ext.utils.get_connection_list()</code>","text":"<p>Returns all existing connection objects as a list.</p> <p>Returns:</p> Type Description <code>List[ConnectionModel]</code> <p>Returns a list of connection objects.</p> Source code in <code>wemulate/ext/utils/retrieve.py</code> <pre><code>def get_connection_list() -&gt; List[ConnectionModel]:\n\"\"\"\n    Returns all existing connection objects as a list.\n    Returns:\n        Returns a list of connection objects.\n    \"\"\"\nreturn dbutils.get_connection_list()\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.reset_connection","title":"<code>wemulate.ext.utils.reset_connection(connection_name)</code>","text":"<p>Deletes all parameter on a specific connection</p> <p>Parameters:</p> Name Type Description Default <code>connection_name</code> <code>str</code> <p>Name of the connection which should be reset</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/reset.py</code> <pre><code>def reset_connection(connection_name: str) -&gt; None:\n\"\"\"\n    Deletes all parameter on a specific connection\n    Args:\n        connection_name: Name of the connection which should be reset\n    Returns:\n        None\n    \"\"\"\nconnection: ConnectionModel = dbutils.get_connection_by_name(connection_name)\ndbutils.delete_all_parameter_on_connection(connection.connection_id)\nphysical_interface_name = dbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name\ntcutils.remove_parameters(connection.connection_name, physical_interface_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.utils.reset_device","title":"<code>wemulate.ext.utils.reset_device()</code>","text":"<p>Deletes all parameters and connection in the database and on the host system.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/utils/reset.py</code> <pre><code>def reset_device() -&gt; None:\n\"\"\"\n    Deletes all parameters and connection in the database and on the host system.\n    Returns:\n        None\n    \"\"\"\nfor connection in dbutils.get_connection_list():\nphysical_interface_name = (\ndbutils.get_physical_interface_by_logical_interface_id(\nconnection.first_logical_interface_id\n).physical_name\n)\ntcutils.remove_parameters(connection.connection_name, physical_interface_name)\ntcutils.remove_connection(connection.connection_name)\ndbutils.reset_all_connections()\n</code></pre>"},{"location":"dev/developer-interface/#setting-and-configuration-interface","title":"Setting and Configuration Interface","text":""},{"location":"dev/developer-interface/#wemulate.ext.settings.get_interface_ip","title":"<code>wemulate.ext.settings.get_interface_ip(interface)</code>","text":"<p>Returns the ip address of an interface.</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>str</code> <p>Name of the interface.</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Returns the ip address as string.</p> Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def get_interface_ip(interface: str) -&gt; Optional[str]:\n\"\"\"\n    Returns the ip address of an interface.\n    Args:\n        interface: Name of the interface.\n    Returns:\n        Returns the ip address as string.\n    \"\"\"\nif netifaces.AF_INET in netifaces.ifaddresses(interface):\nreturn netifaces.ifaddresses(interface)[netifaces.AF_INET][0][\"addr\"]\nelse:\n\"N/A\"\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.get_interface_mac_address","title":"<code>wemulate.ext.settings.get_interface_mac_address(interface)</code>","text":"<p>Returns the mac address of an interface.</p> <p>Parameters:</p> Name Type Description Default <code>interface</code> <code>str</code> <p>Name of the interface.</p> required <p>Returns:</p> Type Description <code>str</code> <p>Returns the mac address as string.</p> Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def get_interface_mac_address(interface: str) -&gt; str:\n\"\"\"\n    Returns the mac address of an interface.\n    Args:\n        interface: Name of the interface.\n    Returns:\n        Returns the mac address as string.\n    \"\"\"\nreturn netifaces.ifaddresses(interface)[netifaces.AF_LINK][0][\"addr\"]\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.get_mgmt_interfaces","title":"<code>wemulate.ext.settings.get_mgmt_interfaces()</code>","text":"<p>Returns all management interfaces saved in the database.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>Returns the management interfaces as list of strings.</p> Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def get_mgmt_interfaces() -&gt; List[str]:\n\"\"\"\n    Returns all management interfaces saved in the database.\n    Returns:\n        Returns the management interfaces as list of strings.\n    \"\"\"\nreturn [\nmgmt_interface.interface_name\nfor mgmt_interface in dbutils.get_mgmt_interfaces()\n]\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.get_all_interfaces_on_device","title":"<code>wemulate.ext.settings.get_all_interfaces_on_device()</code>","text":"<p>Returns all interfaces on the device.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>Returns a list of interfaces.</p> Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def get_all_interfaces_on_device() -&gt; List[str]:\n\"\"\"\n    Returns all interfaces on the device.\n    Returns:\n        Returns a list of interfaces.\n    \"\"\"\nreturn [name for name in netifaces.interfaces() if name.startswith((\"eth\", \"en\"))]\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.add_mgmt_interface","title":"<code>wemulate.ext.settings.add_mgmt_interface(interface_name)</code>","text":"<p>Adds an interface as management interfaces.</p> <p>Parameters:</p> Name Type Description Default <code>interface_name</code> <code>str</code> <p>Name of the interface</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def add_mgmt_interface(interface_name: str) -&gt; None:\n\"\"\"\n    Adds an interface as management interfaces.\n    Args:\n        interface_name: Name of the interface\n    Returns:\n        None\n    \"\"\"\nif check_if_interface_present_on_device(interface_name):\ndbutils.create_mgmt_interface(interface_name)\nelse:\nraise WemulateMgmtInterfaceError(interface_name)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.get_non_mgmt_interfaces","title":"<code>wemulate.ext.settings.get_non_mgmt_interfaces()</code>","text":"<p>Returns all interfaces which usable to connect different devices (all non-mgmt interfaces).</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>Returns the interfaces as list of strings.</p> Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def get_non_mgmt_interfaces() -&gt; List[str]:\n\"\"\"\n    Returns all interfaces which usable to connect different devices (all non-mgmt interfaces).\n    Returns:\n        Returns the interfaces as list of strings.\n    \"\"\"\nreturn [\ninterface_name\nfor interface_name in get_all_interfaces_on_device()\nif interface_name not in get_mgmt_interfaces()\n]\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.check_if_mgmt_interface_set","title":"<code>wemulate.ext.settings.check_if_mgmt_interface_set()</code>","text":"Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def check_if_mgmt_interface_set() -&gt; bool:\nif get_mgmt_interfaces():\nreturn True\nraise WEmulateExecutionError(\n\"There is no management interface set in the config/database!\"\n)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.get_db_location","title":"<code>wemulate.ext.settings.get_db_location()</code>","text":"<p>Returns the database path.</p> <p>Returns:</p> Type Description <code>str</code> <p>Returns the path to the database as string.</p> Source code in <code>wemulate/ext/settings/config.py</code> <pre><code>def get_db_location() -&gt; str:\n\"\"\"\n    Returns the database path.\n    Returns:\n        Returns the path to the database as string.\n    \"\"\"\nreturn WEMULATE_DATABASE_PATH\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.ext.settings.check_if_interface_present_on_device","title":"<code>wemulate.ext.settings.check_if_interface_present_on_device(interface_name)</code>","text":"Source code in <code>wemulate/ext/settings/device.py</code> <pre><code>def check_if_interface_present_on_device(interface_name: str) -&gt; bool:\nreturn interface_name in get_all_interfaces_on_device()\n</code></pre>"},{"location":"dev/developer-interface/#exceptions","title":"Exceptions","text":""},{"location":"dev/developer-interface/#wemulate.core.exc.WEmulateError","title":"<code>wemulate.core.exc.WEmulateError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Generic errors.</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WEmulateError(Exception):\n\"\"\"Generic errors.\"\"\"\npass\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.core.exc.WEmulateValidationError","title":"<code>wemulate.core.exc.WEmulateValidationError</code>","text":"<p>         Bases: <code>WEmulateError</code></p> <p>Validation errors</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WEmulateValidationError(WEmulateError):\n\"\"\"Validation errors\"\"\"\ndef __init__(self, message=\"A validation error occured\"):\nself.message = message\nsuper().__init__(self.message)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.core.exc.WEmulateExecutionError","title":"<code>wemulate.core.exc.WEmulateExecutionError</code>","text":"<p>         Bases: <code>WEmulateError</code></p> <p>Execution errors</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WEmulateExecutionError(WEmulateError):\n\"\"\"Execution errors\"\"\"\ndef __init__(self, message=\"An unknown execution error occured\"):\nself.message = message\nsuper().__init__(self.message)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.core.exc.WEmulateConfigNotFoundError","title":"<code>wemulate.core.exc.WEmulateConfigNotFoundError</code>","text":"<p>         Bases: <code>WEmulateError</code></p> <p>Config file not found error</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WEmulateConfigNotFoundError(WEmulateError):\n\"\"\"Config file not found error\"\"\"\ndef __init__(self, message=\"No configuration file was found\"):\nself.message = message\nsuper().__init__(self.message)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.core.exc.WEmulateFileError","title":"<code>wemulate.core.exc.WEmulateFileError</code>","text":"<p>         Bases: <code>WEmulateError</code></p> <p>Error during writing/reading files</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WEmulateFileError(WEmulateError):\n\"\"\"Error during writing/reading files\"\"\"\ndef __init__(self, message: str):\nself.message = message\nsuper().__init__(self.message)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.core.exc.WEmulateDatabaseError","title":"<code>wemulate.core.exc.WEmulateDatabaseError</code>","text":"<p>         Bases: <code>WEmulateError</code></p> <p>Error during database operation</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WEmulateDatabaseError(WEmulateError):\n\"\"\"Error during database operation\"\"\"\ndef __init__(self, message: str):\nself.message = message\nsuper().__init__(self.message)\n</code></pre>"},{"location":"dev/developer-interface/#wemulate.core.exc.WemulateMgmtInterfaceError","title":"<code>wemulate.core.exc.WemulateMgmtInterfaceError</code>","text":"<p>         Bases: <code>WEmulateError</code></p> <p>Management Interface not found error</p> Source code in <code>wemulate/core/exc.py</code> <pre><code>class WemulateMgmtInterfaceError(WEmulateError):\n\"\"\"Management Interface not found error\"\"\"\ndef __init__(self, interface_name: str = \"\", message=\"\"):\nif not message:\nif interface_name:\nself.message = f\"The interface {interface_name} is not present on this device. Please provide a valid interface name\"\nelse:\nself.message = \"There is no management interface configured. Please configure at least one with the wemulate config command before using other commands\"\nsuper().__init__(self.message)\n</code></pre>"},{"location":"dev/incoming-outgoing-explanation/","title":"Incoming - Outgoing Explanation","text":"<p>WEmulate uses tc in the background. Because tc can not be set on bridge interfaces, the developer decided to set the appropriate disturbance parameters on the first interface used in the bridge. The developers have introduced two keywords: incoming and outgoing, to influence the traffic in different directions. If there are the interfaces LAN-A and LAN-B in the current connection, incoming influences the traffic from LAN-A to LAN-B, whereas outgoing influences the traffic in the other direction from LAN-B to LAN-A. The following drawings should clarify the handling: <pre><code>                            +-----------------Linux Bridge-----------------+\n                            |                                              |\n                            |    +-----------+           +-----------+     |\n                            |    |           |           |           |     |\n                            |    |   LAN-A   |           |   LAN-B   |     |\n                            |    |           |           |           |     |\n                            |    |           |           |           |     |\n                            |    |           |           |           |     |\n                            +----+---^----+--------------+--^----+---+-----+\n                     incoming       +-+  +-+ outgoing       |    |\n                     will influence  |    | will influence  |    |\n                     traffic here    |    | traffic here    |    |\n                                     |    |                 |    |\n                            request  |    |                 |    |\n       +----------------+------------+    |                 |    |            +---------------+\n       |                |                 |                 |    |  request   |               |\n       |  Source        |    reply        |                 |    +------------&gt;  Destination  |\n       |                &lt;-----------------+                 |                 |               |\n       |                |                                   |      reply      |               |\n       |                |                                   +-----------------+               |\n       |                |                                                     |               |\n       |                |                                                     |               |\n       |                |                                                     |               |\n       |                |                                                     |               |\n       +----------------+                                                     +---------------+\n</code></pre></p>"},{"location":"getting-started/install/","title":"Installation","text":"<p>This part of the documentation covers the installation of WEmulate.</p>"},{"location":"getting-started/install/#requirements","title":"Requirements","text":"<p>In order to use WEmulate to influence traffic at least the following requirements should be fulfilled:</p> <ul> <li>At least two network interfaces for <code>LAN-A</code> and <code>LAN-B</code></li> <li>A third management interface if you would like to use the api and frontend module</li> <li>Ubuntu installed</li> <li>Root permissions</li> </ul>"},{"location":"getting-started/install/#install-with-bash","title":"Install with bash","text":"<p>To install only the WEmulate cli with bash, simply run this command in your terminal of choice: <pre><code>$ bash -c \"$(curl -fsSL https://raw.githubusercontent.com/wemulate/wemulate/main/install/install.sh)\"\n</code></pre></p> <p>There are different arguments available in order to enhance the installation experience:</p> <ul> <li><code>-h</code> Prints the help message</li> <li><code>-f</code> Skip the confirmation prompt during installation</li> <li><code>-i &lt;int1,int2&gt;</code> List of interfaces which should be used as management interfaces</li> <li><code>-a</code> Installs the api module</li> <li><code>-v</code> Installs the frontend module</li> </ul> <p>You can for example install the cli, api and frontend module together with one management interface with the following command: <pre><code>$ curl -fsSL https://raw.githubusercontent.com/wemulate/wemulate/main/install/install.sh | bash -s -- -a -v -i ens2 -f\n</code></pre></p>"},{"location":"getting-started/install/#install-from-source","title":"Install from source","text":"<p>You can also install WEmulate from source, please follow the instructions below:</p> <ul> <li> <p>Install poetry (see here for more information)</p> </li> <li> <p>Install all dependencies: <pre><code>$ sudo apt install --yes python3 python3-pip \n</code></pre></p> </li> <li>Clone the repository <pre><code>$ git clone https://github.com/wemulate/wemulate\n</code></pre></li> <li>Install WEmulate <pre><code>$ cd wemulate\n$ poetry install\n</code></pre></li> <li>Configure the management interfaces <pre><code>$ wemulate config set -m ens2\n</code></pre></li> </ul>"},{"location":"getting-started/quickstart/","title":"Quickstart","text":"<p>Let's get started with some simple examples.</p>"},{"location":"getting-started/quickstart/#overview","title":"Overview","text":"<pre><code>$ wemulate\nUsage: main.py [OPTIONS] COMMAND [ARGS]...\n\nA modern WAN emulator\n\nOptions:\n-v, --version                   Show program's version number and exit\n--install-completion [bash|zsh|fish|powershell|pwsh]\n                                Install completion for the specified shell.\n--show-completion [bash|zsh|fish|powershell|pwsh]\n                                Show completion for the specified shell, to\n                                copy it or customize the installation.\n\n--help                          Show this message and exit.\n\nCommands:\nadd     add a new connection or parameter\nconfig  configure the application settings\ndelete  delete a connection or parameter\nreset   reset connection or the whole application settings\nset     set parameters on a connection\nshow    show specific information\n</code></pre>"},{"location":"getting-started/quickstart/#configure-management-interfaces","title":"Configure Management interface(s)","text":"<p>The first step is to configure at least one management interface. <pre><code>$ wemulate config set --help\nUsage: main.py config set [OPTIONS]\n\nset the management interface(s)\n\nOptions:\n-m, --management-interface TEXT\n                                [default: ]\n--help                          Show this message and exit.\n</code></pre></p> <pre><code>$ wemulate config set -m &lt;interface name&gt;\n</code></pre> <pre><code>$ wemulate config set -m ens2 -m eth0\nChanging the management interfaces will reset the device.\nDo you want to proceed (y / yes)?: y\n</code></pre>"},{"location":"getting-started/quickstart/#list-all-management-interfaces","title":"List all Management interfaces","text":"<p>Lists all management interfaces <pre><code>$ wemulate show mgmt-interfaces\n+--------+-------------+-------------------+\n| NAME   | IP          | MAC               |\n+========+=============+===================+\n| ens2   | 10.18.10.10 | 52:54:00:8c:9b:ff |\n+--------+-------------+-------------------+\n| eth0   |             | 52:54:00:ce:44:b2 |\n+--------+-------------+-------------------+    \n</code></pre></p>"},{"location":"getting-started/quickstart/#list-all-interfaces","title":"List all interfaces","text":"<p>Lists all interfaces which are available to configure traffic control. <pre><code>$ wemulate show interfaces\n+--------+------------+------+-------------------+\n| NAME   | PHYSICAL   | IP   | MAC               |\n+========+============+======+===================+\n| LAN-A  | ens3       | N/A  | 52:54:00:c5:84:df |\n+--------+------------+------+-------------------+\n| LAN-B  | ens4       | N/A  | 52:54:00:55:ae:7a |\n+--------+------------+------+-------------------+\n</code></pre></p>"},{"location":"getting-started/quickstart/#add-connection","title":"Add Connection","text":"<p>Adds a new connection on which traffic control can be applied. <pre><code>$ wemulate add connection -n &lt;connection name&gt; -i &lt;interface name 1&gt; &lt;interface name 2&gt;\n</code></pre> <pre><code>$ wemulate add connection -n test -i LAN-A LAN-B\nSuccessfully added a new connection\n</code></pre></p>"},{"location":"getting-started/quickstart/#delete-connection","title":"Delete Connection","text":"<p>Deletes an existing connection and its parameters. <pre><code>$ wemulate delete connection &lt;connection name&gt;\n</code></pre> <pre><code>$ wemulate delete connection test\nconnection test successfully deleted\n</code></pre></p>"},{"location":"getting-started/quickstart/#list-connections","title":"List Connections","text":"<p>Lists all available connections and information. <pre><code>$ wemulate show connections\n+---------+----------------+----------------+---------------------+\n| NAME    | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+=========+================+================+=====================+\n| test    | LAN-A          | LAN-B          | &lt;-- delay: 100      |\n|         |                |                | --&gt; delay: 250      | \n|         |                |                | &lt;-&gt; jitter: 10      |\n|         |                |                | &lt;-- packet_loss: 80 |\n+---------+----------------+----------------+---------------------+\n| test2   | LAN-C          | LAN-D          |                     |\n+---------+-----------------+---------------+---------------------+\n</code></pre></p>"},{"location":"getting-started/quickstart/#list-specific-connection","title":"List specific Connection","text":"<p>Lists only a specific connection and its related information. <pre><code>$ wemulate show connection &lt;connection name&gt;\n</code></pre> <pre><code>$ wemulate show connection test\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-- delay: 100      |\n|        |                |                | &lt;-&gt; jitter: 10      |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n</code></pre></p>"},{"location":"getting-started/quickstart/#add-parameters-to-connection","title":"Add Parameters to Connection","text":"<p>By adding parameters to a connection, the parameters which are already set on this connection will not be changed! If the parameter type is already existing, the value and direction will be updated. If the source and destination are omitted the parameter will be applied birectional. <pre><code>$ wemulate add parameter\nUsage: wemulate add parameter [OPTIONS]\n\n  add parameter on a specific connection, previously added parameters will not\n  be changed\n\nOptions:\n  -n, --connection-name TEXT  [required]\n  -d, --delay INTEGER\n  -j, --jitter INTEGER\n  -b, --bandwidth INTEGER\n  -l, --packet-loss INTEGER\n  -src, --source TEXT\n  -dst, --destination TEXT\n  --help                      Show this message and exit.\n</code></pre> <pre><code>$ wemulate add parameter -n &lt;connection name&gt; -b &lt;bandwidth value&gt; -j &lt;jitter value&gt; -d &lt;delay value&gt; -l &lt;packet loss value&gt; -src &lt;interface name&gt; -dst &lt;interface name&gt;\n</code></pre> <pre><code>$ wemulate show connections\n+--------+----------------+----------------+--------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS   |\n+========+================+================+==============+\n| test   | LAN-A          | LAN-B          |              |\n+--------+----------------+----------------+--------------+\n\n$ wemulate add parameter -n test -l 80 -d 100 -src LAN-B -dst LAN-A\nsuccessfully added parameters to connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-- delay: 100      |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate add parameter -n test -d 50\nsuccessfully added parameters to connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-&gt; delay: 50       |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate add parameter -n test -j 10 \nsuccessfully added parameters to connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-&gt; delay: 50       |\n|        |                |                | --&gt; jitter: 10      |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n</code></pre></p>"},{"location":"getting-started/quickstart/#set-parameters-on-connection","title":"Set Parameters on Connection","text":"<p>When setting parameters on a connection, the parameters which are already set are overwritten by the new parameters! When no direction is given the parameter is applied bidirectional, which means all other parameters are overwritten. If a direction is given, only the parameter in this direction are overwritten. <pre><code>$ wemulate set parameter\n\nUsage: wemulate set parameter [OPTIONS]\n\n  set parameter on a specific connection, previously added parameters will be\n  overriden\n\nOptions:\n  -n, --connection-name TEXT  [required]\n  -d, --delay INTEGER\n  -j, --jitter INTEGER\n  -b, --bandwidth INTEGER\n  -l, --packet-loss INTEGER\n  -src, --source TEXT\n  -dst, --destination TEXT\n  --help                      Show this message and exit.\n</code></pre> <pre><code>$ wemulate set parameter -n &lt;connection name&gt; -b &lt;bandwidth value&gt; -j &lt;jitter value&gt; -d &lt;delay value&gt; -l &lt;packet loss value&gt; -src &lt;interface name&gt; -dst &lt;interface name&gt;\n</code></pre> <pre><code>$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-- bandwidth: 10   |\n|        |                |                | --&gt; packet_loss: 10 |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate set parameter -n test -d 20 -src LAN-A -dst LAN-B\nsuccessfully added parameters to connection test \n\n$ wemulate show connection\n+--------+----------------+----------------+-------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS        |\n+========+================+================+===================+\n| test   | LAN-A          | LAN-B          | &lt;-- bandwidth: 10 |\n|        |                |                | --&gt; delay: 20     |\n+--------+----------------+----------------+-------------------+\n\n$ wemulate set parameter -n test -j 100 -b 100\nsuccessfully set parameters to connection test \n\n$ wemulate show connection\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-&gt; bandwidth: 100  |\n|        |                |                | &lt;-&gt; jitter: 100     |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate set parameter -n test -d 20\nsuccessfully set parameters to connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+---------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS    |\n+========+================+================+===============+\n| test   | LAN-A          | LAN-B          | &lt;-&gt; delay: 20 |\n+--------+----------------+----------------+---------------+\n</code></pre></p>"},{"location":"getting-started/quickstart/#delete-parameter-on-connection","title":"Delete parameter on Connection","text":"<p>Delete parameter(s) on a specific connection. If source and destination information is not given the parameter will removed completely. <pre><code>$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-- delay: 100      |\n|        |                |                | &lt;-&gt; jitter: 10      |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate delete parameter -n test -j -src LAN-A -dst LAN-B\nSuccessfully deleted parameter on connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-- delay: 100      |\n|        |                |                | &lt;-- jitter: 10      |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate delete parameter -n test -j\nSuccessfully deleted parameter on connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+---------------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS          |\n+========+================+================+=====================+\n| test   | LAN-A          | LAN-B          | &lt;-- delay: 100      |\n|        |                |                | &lt;-- packet_loss: 80 |\n+--------+----------------+----------------+---------------------+\n\n$ wemulate delete parameter -n test -l -src LAN-B -dst LAN-A\nSuccessfully deleted parameter on connection test\n\n$ wemulate show connections\n+--------+----------------+----------------+----------------+\n| NAME   | 1. INTERFACE   | 2. INTERFACE   | PARAMETERS     |\n+========+================+================+================+\n| test   | LAN-A          | LAN-B          | &lt;-- delay: 100 |\n+--------+----------------+----------------+----------------+\n</code></pre></p>"},{"location":"getting-started/quickstart/#reset-connection","title":"Reset Connection","text":"<p>All parameters on a specific connection will be resettet. <pre><code>$ wemulate reset connection &lt;connection name&gt;\n</code></pre> <pre><code>$ wemulate reset connection test\nSuccessfully resetted connection test \n</code></pre></p>"},{"location":"getting-started/quickstart/#reset-device","title":"Reset Device","text":"<p>All parameters and connections will be resettet. <pre><code>$ wemulate reset device\nSuccessfully resetted device\n</code></pre></p>"},{"location":"hw/di-1000/","title":"DI-1000 - Fanless Embedded PC","text":""},{"location":"hw/di-1000/#facts","title":"Facts","text":"<p>All the facts are from compmall</p> <ul> <li>Product Page</li> <li>Intel Core i5</li> <li>6 Ethernet Ports</li> </ul>"},{"location":"hw/di-1000/#installation","title":"Installation","text":"<p>This section describes step-by-step how to install Ubuntu 20.04 on the hardware.</p> <ol> <li> <p>Select the language     </p> </li> <li> <p>Select the keyboard language     </p> </li> <li> <p>The device has 6 interfaces in total. 2 on the back side. These interfaces will be used as management interfaces. One interface will get a dynamic IP addres via DHCP and the other interface will get a static IP address of <code>10.0.0.10/24</code>.     Configure the static interface like on the picture below.     Gateway, name servers and search domain are not required.      Label the interface which will have static ip address on the back of the device. </p> <p></p> <p>The other 4 interfaces are located on the front of the device.  Do not configure these interfaces and leave them in the status <code>disabled</code>. Note wich interface is which one and label the interfaces on the front of the device with <code>LAN-A</code> - <code>LAN-D</code>.</p> <p></p> <p>After all interfaces are configured, the interface overview should look like below.</p> <p></p> </li> <li> <p>Leave the ubuntu mirror to the default value. </p> <p></p> </li> <li> <p>Configure no proxy.</p> <p></p> </li> <li> <p>Do not change any configuration on the storage, leave it as it is.</p> <p></p> </li> <li> <p>Configure <code>your name</code>, <code>server name</code>, <code>username</code> and <code>password</code>.</p> <p></p> </li> <li> <p>In the SSH setup make sure <code>install OpenSSH server</code> is checked.</p> <p></p> </li> <li> <p>Do not check any features on this page. Everything needed will be installed via the install script.</p> <p></p> </li> <li> <p>Start the installation and wait until it is finished. </p> <p></p> </li> <li> <p>Restart device when it says so and unmount the installation medium after rebooting.</p> <p></p> </li> <li> <p>Wait until cloudinit has finished.</p> <p></p> </li> <li> <p>Login and check that all interfaces are visible with the <code>ip a</code> command. The static configured interface will be down if the cable is not plugged in. Confirm the IP address of that interface is configured in the cloudinit file <code>/etc/cloud/cloud.cfg.d/50-curting-networking.cfg</code>.</p> <p></p> </li> <li> <p>Create a netplan configuration file that contains all other interfaces than the interfaces that were configured in the previous steps. In this case those are the interfaces <code>enp3s0</code>, <code>enp4s0</code>, <code>enp7s0</code> and <code>enp8s0</code> are the ones on the back of the device and need to be written to the file <code>/etc/netplan/51-wemulate-connection-interfaces.yaml</code>.</p> <p>After adding the file run <code>netplan apply</code> to make the changes effective. This will make it possible that the interfaces will come in an <code>UP</code> state as soon as the cables will be plugged in.</p> </li> </ol> <pre><code>---\nnetwork:\nversion: 2\nrenderer: networkd\nethernets:\nenp3s0:\ndhcp4: false\nenp4s0:\ndhcp4: false\nenp7s0:\ndhcp4: false\nenp8s0:\ndhcp4: false\n</code></pre>"}]}